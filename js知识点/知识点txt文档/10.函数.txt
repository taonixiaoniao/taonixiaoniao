1、函数的概念：在JS中，可能会定义非常多的相同代码或者功能相似的代码，这些代码可能需要大量重复使用。此时我们
	就使用JS中的函数。函数就是封装了一段可被重复调用执行的代码块。通过此代码块可以实现大量代码的
	重复使用。
2、函数的使用：分为两步
	（1）声明函数：function 函数名(){
			//函数体
			}
	（2）调用函数：函数名()
3、函数的参数：分为形参和实参。
	function(形参1,形参2...){  //在声明函数的小括号里是形参（形式上的参数）

	}
	函数名(实参1,实参2...);  //在函数调用的小括号里是实参（实际的参数）
	例：
	function cook(aru){// 形参是接受实参的 aru='酸辣土豆丝' 形参类似于一个变量接受实参的值
		console.log(aru);	
	}
	cook('酸辣土豆丝')
	参数的意义：在函数内部的某些值不能固定，我们可以通过参数在调用函数时传递不同的值进去。
4、形参与实参不匹配：
	（1）如果实参的个数多于形参，则以形参为准，按顺序取形参的个数
	（2）如果实参的个数小于形参，多余形参定义为undefined 最终的结果时NaN
	（3）JS中形参的默认值就是undefined
5、函数的返回值return：
	函数内部不应该出现输出语句，我们希望将函数的返回值返回给调用者，return语句就能实现。
	function 函数名(){
		return 需要返回的结果	
	}
6、return终止函数：return之后的代码不执行。
	return只能返回一个值，如果用逗号隔开多个值，以最后一个为准。
	函数如果没有return，则返回undefined。
7、break、continue、return的区别：
	break：结束当前的循环体
	continue：跳出本次循环，继续执行下次循环
	return：不仅可以退出循环，还能够返回return的值，同时还可以结束当前的函数体内的代码
8、arguments的使用：
	当我们不确定有多少参数传递的时候，可以用arguments来获取，在JS中，arguments实际上是当前函数的一个
	内置对象，所有函数都内置了一个arguments对象，arguments对象中存储了传递的所有实参。
	arguments是一个伪数组，具有数组的length属性，按照索引的方式进行存储，没有数组的一些方法。
	只有函数才有arguments对象。
9、函数调用另一个函数：
	每个函数都是独立的代码块，用于完成特殊的任务，因此会经常用到函数相互调用的情况。
10、匿名函数表达式：
	var fn = function(){}
	其中的fn不再是函数名，而是变量名，函数表达式声明方式跟变量差不多，只不过变量里面存的是值，而
	函数表达式里面存的是函数
11.回调函数：
回调是一个作为参数传递给另一个函数的函数，并在其父函数完成后执行 
function doSomething(msg, callback){
    alert(msg);
    if(typeof callback == "function") 
    callback();
 } 
doSomething("回调函数", function(){
    alert("匿名函数实现回调!");
 });
