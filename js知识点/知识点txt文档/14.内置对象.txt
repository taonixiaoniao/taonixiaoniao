JS中的对象分为三种：自定义对象、内置对象、浏览器对象，前两种对象是JS基础内容，属于ECMAScript;第三个浏览器对象是JS独
	有的。
1、内置对象：JS语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是最基本而必要的功能（属性和方法）。
	JS中提供了多个内置对象： Math（数学对象），Date（日期对线），Array（数组对象），String（字符串对象）
2、查阅文档：https://developer.mozilla.org/zh-CN/
3、如何学习对象中的方法：
	（1）查阅该方法的功能
	（2）查看里面参数的意义和类型
	（3）查看返回值
	（4）通过demo进行测试
4、Math对象：
	（1）Math对象不是一个构造函数，所以我们不需要new来调用，文史直接使用里面的属性和方法即可。
	Math.PI：圆周率；
	Math.floor()：向下取整；
	Math.ceil()：向上取整；
	Math.round()：四舍五入 就近取整 -1.5取-1而不是-2
	Math.abs()：绝对值 隐式转换 自动把字符型数字转化成数值型
	Math.max()/Math.min()：求最大值/最小值
	Math.sqrt(a)对a开根号
	Math.pow(a, n) a的n次方
	(num/n).toFixed(2)将结果保留两位小数
5、随机数方法：
	（1）Math.random()返回一个随机的小数 取值范围[0,1)。
	（2）这个方法里面不跟参数
6、Date对象：
	（1）Date()日期对象是一个构造函数 必须使用new调用创建我们的日期对象 var date = new Date()
	如果没有参数 返回当前系统时间。
	（2）参数常用的写法：
	数字型：2021,7,25		数字型的返回值比输入的值大一个月
	字符串型： '2021-7-25 00:00:00'
	（3）日期格式化：
		getFullYear() 获得当年
		getMonth() 获得当月（0-11）返回的月份小一个月
		getDate() 获得当天日期 （0-6）周日是0
		getDay() 获得星期几
		getHours() 获得当前小时
		getMinutes() 获得当前分钟
		getSeconds() 获得当前秒钟
7、获取日期总的毫秒形式：
	Date对象是基于1970年1月1日（世界标准时间）起的毫秒数（时间戳），我们经常利用毫秒来计算时间，因为它更精确。
	获取的方法两种：
	（1）valueOf()
	（2）getTime()
	（3）var date = +new Date();	+new Date()可以直接返回总的毫秒数
	（4）console.log(Date.now());	可以讲总的毫秒数直接打印出来
	距离1970.1.1的毫秒数
8、Array对象：
	检测是否为数组：
	（1）instanceof 运算符 可以用来检测是否为数组
	var arr = [];
	console.log(arr instanceof Array);
	（2）Array.isArray(参数) 该方法的优先级高于instanceof。
	添加和删除元素的方法：
	（1）push(参数1.....)：末尾添加一个或多个元素，注意修改原数组，返回新的长度
	（2）pop()：删除数组最后一个元素，把数组长度减1 无参数、修改原数组，返回它删除的元素的值
	（3）unshift(参数1......)：想数组的开头添加一个或多个元素，并返回新的长度
	（4）shift()：删除数组的第一个元素，数组长度减1无参数，修改原数组，返回第一个元素的值
	数组排序：
	（1）reverse()：颠倒数组中元素的顺序，无参数，该方法会改变原来的数组，返回新数组。
	（2）sort()：对数组元素进行排序，该方法会改变原来的数组，返回新数组。
		sort只能对个位数进行排序，需要完善。
		arr.sort((a, b) => (a - b)) 升序排序
		arr.sort((a, b) => (b - a)) 降序排序
		
	数组索引方法：
	（1）indexOf(数组元素)：数组中查找给定元素的第一个索引，从前往后查找，如果存在返回索引号，如果不存在，则返回-1。
	（2）lastIndexOf(数组元素)：在数组中的最后一个索引，从后往前查找，如果存在返回索引号，如果不存在，则返回-1。
		这两种方法都只返回第一个满足元素的索引号。
	数组转化为字符串：toString()：把数组转化成字符串，逗号分隔每一项。返回一个字符串。
			join('分隔符')该方法用于把数组中的所有元素转化为一个字符串。返回一个字符串。
	补充方法：
	（1）concat()：连接两个或多个数组，不影响原数组，返回新的数组
	（2）slice()：数组截取slice(begin,end)，返回截取项目的新数组
	（3）splice()：数组删除、替换、添加
		splice(第几个开始，要删除的个数，要添加的数组)，返回被删除项目的新数组，会影响原数组
	（4）entries：entries() 方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。	
		eg： const array1 = ['a', 'b', 'c'];
		const iterator1 = array1.entries();
		console.log(iterator1.next().value); // expected output: Array [0, "a"]
		console.log(iterator1.next().value);// expected output: Array [1, "b"]
	（5）将一个数组重构为长度为n、每个元素为0的数组：let arr = new Array(n).fill(0)
	
9、基本包装类型：
	把简单数据类型包装成为复杂数据类型，这样基本数据类型就有了属性和方法。
	为了方便操作基本数据类型，JS还提供了三个特殊的引用类型：String、Number、Boolean。
10、字符串的不可变：
	里面的值不可变，虽然看上去改变内容，但其实地址变了，内存中新开辟了一个内存空间。
	重新给str赋值或者拼接字符串的时候，电脑会一直开辟新的空间来保存新的str的值，所以要尽量避免进行大量的字符串
	赋值和平拼接操作。
11、根据字符串返回位置
	字符串所有的方法都不会修改字符串本身，操作完成会返回一个新的字符串。
	两个方法：
	（1）indexOf()：indexOf(参数1，[起始的位置])   
	var str = '改革春风吹满地'  console.log(str.indexOf('春',3))  //从索引号是3的位置开始查找
	（2）lastIndexOf()：从后往前查找，方法与（1）相同，数组也可以用相同的方法确定查找的起始位置
12、根据位置返回字符：
	（1）charAt(index)返回指定位置的字符(index 字符串的索引号)    str.charAt(0)
	（2）charCodeAt(index)获取指定位置处字符串的ASCII码(用户键盘上的每个键都对应着一个ASCII码)  可以判断用户按下
	了哪个键  		str.charCodeAt(0)
	（3）str[index]获取指定位置处字符
13、字符串操作方法：
	（1）concat(str1,str2...)：等效于‘+’，用于拼接多个字符串
	（2）substr(start,length)：从start位置开始(索引号)，length取的个数
	（3）slice(start,end)：从start位置开始，截取到end位置，end取不到（它们两都是索引号）
	（4）substring(start,end)：从start位置开始，截取到end位置，end取不到，基本和slice相同，但是不接受负值
	（5）replace('被替换的字符','替换为的字符')：替换字符 只会替换第一个字符
	（6）split('分隔符')：字符转化为数组	以分隔符有为界限，把字符串分成n个数组元
	（7）join('分隔符')：数组转化为字符串	以分隔符为界限，把数组中所有元素放入一个字符串
	（8）charCodeAt()：
		该方法可以把字符串编码称为一个数字，字符串'0'-'9'对应'48'-'57'，只对第一位数有效

14、字符串翻转：
	一般字符串不能直接翻转，但是可以把字符串转化成数组进行翻转，然后再转换回字符串
	str.split('').reverse('').join('')这样就可以实现字符串的翻转
