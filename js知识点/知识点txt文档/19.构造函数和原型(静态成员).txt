1、构造函数：一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与new运算符一起使用。
	我们可以把对象中的一些公共的属性和方法抽取出来，然后封装到这个函数里面。
	new在执行时会做的四件事：	
	（1）在内存中创建一个新的空对象
	（2）让this指向这个对象
	（3）执行构造函数里面的代码，给这个新对象添加属性和方法
	（4）返回这个新对象
2、构造函数中可以添加一些成员，可以再构造函数身上添加，也可以在构造函数内部的this上添加，这两种方式添加的成员分别称为
	静态成员和实例成员。
	（静态成员）在构造函数本身添加的成员，只能由构造函数本身来访问
	（实例成员）在构造函数内部创建的对象成员，只能由实例化的对象来访问
3、构造函数虽然很方便，但是存在浪费内存的问题。实例对象调用相同的方法会开辟新的内存空间，我们希望所有的对象使用同一个函数，
	这样就比较节省内存。
4、构造函数prototype
	构造函数是通过原型分配的函数，所有的对象可以共享。
	JS规定，每个构造函数都有一个prototype属性，指向另一个对象，这个prototype就是一个对象。这个对象所有的属性和方法都会
	被构造函数所拥有。
	我们可以吧那些不变的方法，直接定义在prototype对象上，这样所有的实例就可以共享这些方法。
5、原型是什么？
	原型就是一个对象，我们称prototype为原型对象
	原型的作用是什么？
	原型的作用就是共享方法
	一般情况下，我们公共的属性定义到构造函数里面，公共的方法我们定义到原型对象身上。
6、对象原型__proto__
	对象属性都会有一个__proto__指向构造函数的prototype原型对象，之所以对象可以使用构造函数prototype原型对象的属性和
	方法，就是因为有__proto__原型的存在
	__proto__和prototype是等价的
	查找规则：首先看实例对象上是否有该方法，如果有就执行实例对象上的方法。
		如果没有该方法，因为有__proto__的存在，就去构造函数原型对象prototype身上去查找该方法。
	__proto__对象原型的意义就在于为对象的查找机制提供了一个方向，但它是一个非标准属性，因此在实际开发中，不可以使用这
	个属性，它只是内部指向原型对象prototype
7、constructor构造函数：
	对象原型（__proto__）和构造函数原型对象（prototype）里面都有一个constructor属性，constructor我们称为构造函数，因为
	它指回构造函数本身。
	constructor主要用于记录该对象引用于哪个构造函数，它可以让原型对象重新指向原来的构造函数。
	很多情况下我们需要手动使用constructor这个属性来指回原来的构造函数。
	如果我们修改了原来的原型对象，给原对象赋值的是一个对象，则必须手动利用constructor指回原来的函数。
