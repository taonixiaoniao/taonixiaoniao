1、正则表达式是用于匹配字符串中字符组合的模式，在JS中，正则表达式也是对象。
	正则表达式通常被用来检索、替换那些符合某个模式的文本，例如表单验证：用户名表单只能输入英文字母、数字或者下划线，昵称可以
	输入中文（匹配）。此外，正则表达式还常用语过滤掉页面内容中一些敏感词（替换），或从字符中获取我们想要的特定部分等。
2、正则表达式的特点
	- 灵活性、逻辑性和功能性非常强
	- 可以迅速地用极简单的方式达到字符串的复杂控制
	- 对于刚接触的人来说比较晦涩难懂
 	- 实际开发，一般都是直接复制写好的正则表达式，但要求会使用正则表达式并且根据实际情况修改正则表达式
	- 正则表达式里面不需要加引号，不管是数字型还是字符串型
3、创建正则表达式：
	（1）通过调用RegExp对象的构造函数创建
		var regExp = new RegExp(/表达式/)
	（2）通过函数字面量创建
		var regExp = /表达式/
4、检测正则表达式test：
	test()正则对象方法用于检测字符串是否符合该规则，该对象会返回true或false，其参数是测试字符串。
	语法：regexObj.test(str)
		regexObj是写的正则表达式
		str是要检测的文本
5、正则表达式则组成：
	- 一个正则表达式可以由简单地字符构成，比如/abc/，也可以是简单和特殊字符构成，比如/ab*c/。其中特殊字符也称为元字符，在正则
	表达式中是具有特殊意义的专用符号，如^,$,+
6、正则表达式中的特殊字符：
	（1）边界符：
	  	^ 表示匹配行首的文本(以谁开始)
		$ 表示匹配行尾的文本(以谁结束)
		当^和$放在一起的时候，表示的是精确匹配 例如/^abc$/则表示匹配的字符串就是abc
	（2）字符类：
		/[ ]/表示有一系列字符可供选择，只要匹配其中的一个就可以了 
		/[abc]/只要包含a、b、c中的一个返回的就是true
		/^[abc]$/精确匹配a或b或c，只有当字符串为单个字母a或b或c的时候返回结果才为true
		字符组合：/^[a-zA-Z0-9]$/  大小写字母和和数字的任意组合返回都是true
		如果中括号里面有^表示取反，不能有包含这些内容
		/[^abc]/表示不能包含a、b、c这三个字母中的任何一个
7、量词符：
	量词符用来设定某个模式出现的次数
	* 重复零次或更多次
	+ 重复一次或更多次
	? 重复零次或一次
	{n}重复n次
	{n,}重复n次或更多次
	{n,m}重复n-m次
	注意：逗号两边不能有空格 
	/^abc{3}$/这种写法只让c重复三次，abccc才返回为true
	/^(abc){3}$/则是让abc重复三次 ()小括号可以改变优先级
8、预定义类：
	\d 匹配0-9之间的任一数字，相当于[0-9]
	\D 匹配0-9以外的字符，相当于[^0-9]
	\w 匹配任意的字母、数字和下划线，相当于[A-Za-z0-9]
	\W 除所有字母、数字、和下划线，相当于[^A-Za-z0-9]
	\s 匹配空格(包括换行符、制表符、空格等)，相当于[\t\r\n\v\f]
	\S 匹配非空格的字符，相当于[^\t\r\n\v\f]
	正则中有一个或的符号：|
		