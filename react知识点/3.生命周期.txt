1、定义：
	咋某一时刻，可以自动执行的函数

2、react生命周期分为四大阶段：
	Intialzation：设置(初始化)props和state，在constructor中完成
	Mounting：componentWillMount(dom挂载之前执行)
		--> render(props或states改变进行渲染)
		--> componentDidMount(dom挂载完了执行)         
	Updation：
		props: componentWillReceiveProps //组件第一次存在dom中不会被执行，已经存在于dom中才会被执行
			--> shouldComponentUpdate(如果为true) //必须返回一个布尔值，返回true则继续执行，返回false则中止执行
			-->componentWillUpdate  组件即将更新
			--> render //render  生命周期必须有，其他的生命周期按需使用
			--> componentDidUpdate  组件更新完成
		states: shouldcomponentUpdate(如果为true)
			-->componentWillUpdate
			--> render
			--> componentDidUpdate
	Unmounting：
		 componentWillUnmount()  卸载组件


3、更新后的生命周期：
	组件的生命周期：每个组件都包含 “生命周期方法”，你可以重写这些方法，以便于在运行过程中特定的阶段执行这些方法。
	你可以使用此生命周期图谱作为速查表。在下述列表中，常用的生命周期方法会被加粗。其余生命周期函数的使用则相对罕见。

	挂载
	当组件实例被创建并插入 DOM 中时，其生命周期调用顺序如下：
	constructor()
	static getDerivedStateFromProps()
	render()
	componentDidMount()
	下述生命周期方法即将过时，在新代码中应该避免使用它们：
	UNSAFE_componentWillMount()

	更新
	当组件的 props 或 state 发生变化时会触发更新。组件更新的生命周期调用顺序如下：
	static getDerivedStateFromProps()
	shouldComponentUpdate()
	render()
	getSnapshotBeforeUpdate()
	componentDidUpdate()

	注意:
	下述方法即将过时，在新代码中应该避免使用它们：
	UNSAFE_componentWillUpdate()
	UNSAFE_componentWillReceiveProps()

	卸载
	当组件从 DOM 中移除时会调用如下方法：
	componentWillUnmount()

	错误处理
	当渲染过程，生命周期，或子组件的构造函数中抛出错误时，会调用如下方法：
	static getDerivedStateFromError()
	componentDidCatch()

	其他 APIs
	组件还提供了一些额外的 API：
	setState()
	forceUpdate()
	class 属性
	defaultProps
	displayName
	实例属性
	props
	state
详见 https://zh-hans.reactjs.org/docs/react-component.html#unsafe_componentwillreceiveprops
