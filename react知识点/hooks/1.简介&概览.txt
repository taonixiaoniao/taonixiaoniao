1、为什么发明react Hooks : 
	在组件之间复用状态逻辑很难, React 没有提供将可复用性行为“附加”到组件的途径（例如，把组件连接到 store)。
	你可以使用 Hook 从组件中提取状态逻辑，使得这些逻辑可以单独测试并复用。
	Hook 使你在无需修改组件结构的情况下复用状态逻辑。 
	这使得在组件间或社区内共享 Hook 变得更便捷。
	class 是学习 React 的一大屏障。你必须去理解 JavaScript 中 this 的工作方式，这与其他语言存在巨大差异。
	还不能忘记绑定事件处理器。没有稳定的语法提案，这些代码非常冗余。
	Hook 使你在非 class 的情况下可以使用更多的 React 特性
2、概览：
	Hook是向下兼容的，Hook 不会影响你对 React 概念的理解。 恰恰相反，Hook 为已知的 React 概念提供了
	更直接的 API：props， state，context，refs 以及生命周期
	Hook 是一些可以让你在函数组件里“钩入” React state 及生命周期等特性的函数。
	Hook 不能在 class 组件中使用 —— 这使得你不使用 class 也能使用 React。
	Hook分为state Hook 和 Effect Hook
3、使用规则：
	Hook 就是 JavaScript 函数，但是使用它们会有两个额外的规则：
	只能在函数最外层调用 Hook。不要在循环、条件判断或者子函数中调用。
	只能在 React 的函数组件中调用 Hook。不要在其他 JavaScript 函数中调用。